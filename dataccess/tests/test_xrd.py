import pytest
import os
from dataccess import xrd
import numpy as np
from dataccess import utils
from dataccess import database
import config

# TODO: repopulate this module

def test_main():
    result = xrd.main(['quad2'], ['evaltest'], bgsub = False)
    assert utils.make_hashable(result)  == '810b4ce967076eb29c140561c5c2195812fc6657'
    patterns, imarrays = result
    assert np.all(np.isclose(patterns[0][1][200:300],
        np.array([ 603.41339553,  604.60241147,  604.8132577 ,  605.00970532,
                605.33371694,  605.6524121 ,  606.25001623,  606.4694361 ,
                607.09366648,  607.46448784,  607.82977002,  608.04411829,
                608.094091  ,  608.45238118,  608.55971817,  608.98025408,
                609.18042089,  609.33096877,  609.64706146,  609.23083376,
                609.7201641 ,  609.67828102,  609.50995183,  609.19411749,
                608.95988306,  609.12589577,  608.82251798,  609.13108028,
                608.87665294,  609.08883371,  609.41371644,  609.43804357,
                609.53530761,  609.27447619,  609.49108276,  609.38727837,
                609.64542097,  609.78953353,  609.681366  ,  609.60355354,
                609.11720897,  609.35014272,  609.49232533,  609.04695572,
                609.73198243,  609.4651523 ,  609.74775911,  609.6149503 ,
                609.52848467,  609.73824674,  609.5324574 ,  609.65942115,
                609.72913484,  609.60777801,  609.98749944,  609.58375773,
                610.00112405,  609.94952124,  609.87619306,  610.02360954,
                609.64504285,  610.06889023,  609.97637508,  610.15339723,
                610.3380583 ,  609.87963519,  610.16181761,  609.89960421,
                610.04445114,  610.18748158,  609.60911524,  609.88626533,
                609.91440924,  609.93890382,  610.04859453,  609.89445539,
                609.74131792,  609.74048015,  609.82546076,  610.01093221,
                609.89626933,  609.94661208,  609.62426225,  609.62100503,
                609.44558921,  609.26088109,  609.59175626,  609.6372742 ,
                609.94691263,  609.97322182,  610.08944111,  609.74603612,
                609.49712074,  609.84825641,  609.81642711,  609.974684  ,
                609.70636956,  609.76026202,  609.59174468,  609.61337859])))

#    result2 = xrd.main(['quad2'], ['evaltest'], bgsub = True, compound_list=['Fe3O4'])
#    target2 =\
#        np.array([ 1098067.47544578,  1072481.10969062,   308843.1232714 ,
#                -328819.06439096,   -50101.82426203,  -347690.83327733,
#                -279919.80676854,   112812.57148512,  -434528.86240345,
#                 221368.45915011,   608938.06233229,  -402763.48579531,
#                 182694.14793034,  -807830.31950037,    71389.86863471,
#                -229104.76199943,  -232130.22104807,   -71825.16957247,
#                -166792.24328566,  -275165.97311402,  -103753.60237671,
#                 423240.86044817,   -37662.74003197,  -631094.20532822,
#                -799726.86945052,  -662455.42052826,  -862169.05154647,
#                -813294.18840489,  -856271.04863608,  -340836.78856932,
#                -234058.69237895,  -242854.43217403,    98887.39214928,
#                -372199.11116589,  -426683.2530489 ,  -339819.45657522,
#                  -9646.48944394,    57374.94884731,   556453.17476951,
#                 -33112.86549198,  -707537.44319501,  -582473.42262232,
#                -243229.6555098 ,  -631159.74230618,   216827.319282  ,
#                -222715.41732824,  -418266.53294503,  -480930.03198139,
#                 518966.88699561,  -151215.67762141,   124813.32317499,
#                -499381.51132878,  -314506.6797817 ,   125112.28013051,
#                 -77482.88804749,   -76221.68020535,    60499.51651724,
#                 375873.66446953,  -112039.96314605,   -58719.87991119,
#                -557086.74399952,  -191740.70208167,  -281487.12907552,
#                 854353.69458753,    -2516.76065076,  -214336.18392858,
#                 304415.61443102,  -359185.39524518,  -222613.77994596,
#                  83861.40871396,  -267762.56993171,  -504858.25499769,
#                 185381.27744055,    91625.78492962,  -315933.00970687,
#                 269896.44899733,  -140964.79115807,  -329249.97075412,
#                -210778.24176425,   221291.5386102 ,     6261.17813374,
#                -130571.47463379,  -255474.48683231,   131490.34490868,
#                -367487.58608663,  -917830.47708034,  -593189.70790248,
#                -116436.06399724,   116666.19941442,   134338.4350361 ,
#                 746738.78620104,  -150970.54709373,  -270481.82776637,
#                 159365.60522763,  -193691.75491775,   196806.11897791,
#                -174685.76400483,   121829.96070798,  -250061.45871442,
#                -108115.12021064])
#    assert np.all(np.isclose(result2[0][0][1][200:300], target2))
#
#    result3 = xrd.main(['quad2'], ['evaltest', 'goodratio'], bgsub = True, compound_list=['Fe3O4'])
#    assert np.all(np.isclose(result3[0][0][1][200:300], result2[0][0][1][200:300]))
#    return result


def test_mecana_xrd():
    import test_mecana
    test_mecana.reset()
    os.system('mecana.py -n xrd quad2 evaltest -b -c Fe3O4')
#    db_output = list(database.collections_lookup['session_cache'].find({}))[0]
#    assert np.all(np.isclose(db_output['data'][1][200:210],
#        [1098067.4754457767, 1072481.1096906231, 308843.12327139836,
#        -328819.0643909628, -50101.82426202637, -347690.833277326,
#        -279919.8067685431, 112812.57148511676, -434528.86240345164, 221368.45915011165]))

    from dataccess import mecana_main
    import sys
    sys.argv = 'mecana.py -n xrd quad2 -l evaltest -b -c Fe3O4'.split()
    if config.playback:
        with pytest.raises(SystemExit):
            mecana_main.main()
    else:
        mecana_main.main()
